import { ActionPanel, Action, List, showToast, Toast, Icon, AI } from "@raycast/api";
import { useState, useEffect } from "react";
import { processInput } from "./services/wordCompletion";
import { polishText } from "./services/ai";
import { Suggestion } from "./utils/types";
import { debounce, handleError } from "./utils/helpers";

export default function Command() {
  const [input, setInput] = useState<string>("");
  const [suggestions, setSuggestions] = useState<Suggestion[]>([]);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [currentModel, setCurrentModel] = useState<AI.Model>(AI.Model.OpenAI_GPT4);

  const debouncedProcessInput = debounce(async (text: string) => {
    if (!text.trim()) {
      setSuggestions([]);
      return;
    }

    setIsLoading(true);
    try {
      const results = await processInput(text, { model: currentModel });
      setSuggestions(
        results.map((text) => ({
          text,
          type: "completion",
        }))
      );
    } catch (error) {
      if (error instanceof Error) {
        handleError(error);
      } else {
        showToast({
          style: Toast.Style.Failure,
          title: "Processing Failed",
          message: "Unable to process input text",
        });
      }
    } finally {
      setIsLoading(false);
    }
  }, 300);

  useEffect(() => {
    debouncedProcessInput(input);
  }, [input, currentModel]);

  const handlePolish = async (text: string) => {
    if (!text.trim()) return;

    try {
      setIsLoading(true);
      const polished = await polishText(text, {
        model: currentModel,
        style: "professional"
      });
      
      setSuggestions([
        ...suggestions,
        {
          text: polished,
          type: "polish",
        },
      ]);
    } catch (error) {
      if (error instanceof Error) {
        handleError(error);
      } else {
        showToast({
          style: Toast.Style.Failure,
          title: "Polish Failed",
          message: "Unable to polish text",
        });
      }
    } finally {
      setIsLoading(false);
    }
  };

  const getModelName = (model: AI.Model) => {
    const modelNames: Record<AI.Model, string> = {
      [AI.Model.OpenAI_GPT4]: "GPT-4",
      [AI.Model.Anthropic_Claude_Sonnet]: "Claude Sonnet"
    } as Record<AI.Model, string>;
    return modelNames[model] || "Unknown Model";
  };

  return (
    <List
      isLoading={isLoading}
      searchBarPlaceholder={`Start typing to get writing suggestions using ${getModelName(currentModel)}...`}
      onSearchTextChange={setInput}
      throttle
      actions={
        <ActionPanel>
          <ActionPanel.Section>
            <Action
              title="Switch to GPT-4"
              icon={Icon.Stars}
              onAction={() => setCurrentModel(AI.Model.OpenAI_GPT4)}
              shortcut={{ modifiers: ["cmd"], key: "1" }}
            />
            <Action
              title="Switch to Claude Sonnet"
              icon={Icon.Stars}
              onAction={() => setCurrentModel(AI.Model.Anthropic_Claude_Sonnet)}
              shortcut={{ modifiers: ["cmd"], key: "2" }}
            />
          </ActionPanel.Section>
        </ActionPanel>
      }
    >
      <List.Section title="Writing Suggestions">
        {suggestions.map((suggestion, index) => (
          <List.Item
            key={index}
            title={suggestion.text}
            icon={suggestion.type === "polish" ? Icon.Wand : Icon.Text}
            subtitle={`Generated by ${getModelName(currentModel)}`}
            accessories={[
              {
                text: suggestion.type === "polish" ? "Polished" : "Original"
              }
            ]}
            actions={
              <ActionPanel>
                <ActionPanel.Section>
                  <Action.CopyToClipboard
                    title="Copy to Clipboard"
                    content={suggestion.text}
                    shortcut={{ modifiers: ["cmd"], key: "c" }}
                  />
                  <Action
                    title="Polish Text"
                    icon={Icon.Wand}
                    onAction={() => handlePolish(suggestion.text)}
                    shortcut={{ modifiers: ["cmd"], key: "p" }}
                  />
                </ActionPanel.Section>
                <ActionPanel.Section title="Switch AI Model">
                  <Action
                    title="Switch to GPT-4"
                    icon={Icon.Stars}
                    onAction={() => setCurrentModel(AI.Model.OpenAI_GPT4)}
                    shortcut={{ modifiers: ["cmd"], key: "1" }}
                  />
                  <Action
                    title="Switch to Claude Sonnet"
                    icon={Icon.Stars}
                    onAction={() => setCurrentModel(AI.Model.Anthropic_Claude_Sonnet)}
                    shortcut={{ modifiers: ["cmd"], key: "2" }}
                  />
                </ActionPanel.Section>
              </ActionPanel>
            }
          />
        ))}
      </List.Section>
    </List>
  );
} 